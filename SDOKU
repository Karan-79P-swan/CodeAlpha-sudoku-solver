#include <iostream>
#include <vector>

#define N 9

// Function to print the Sudoku board
void printBoard(const std::vector<std::vector<int>>& board) {
    for (int row = 0; row < N; ++row) {
        for (int col = 0; col < N; ++col) {
            std::cout << board[row][col] << " ";
        }
        std::cout << std::endl;
    }
}

// Function to check if placing num in board[row][col] is valid
bool isValid(const std::vector<std::vector<int>>& board, int row, int col, int num) {
    // Check if num is not in the current row
    for (int x = 0; x < N; ++x) {
        if (board[row][x] == num) return false;
    }

    // Check if num is not in the current column
    for (int x = 0; x < N; ++x) {
        if (board[x][col] == num) return false;
    }

    // Check if num is not in the current 3x3 sub-grid
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (board[i + startRow][j + startCol] == num) return false;
        }
    }

    return true;
}

// Function to solve the Sudoku using backtracking
bool solveSudoku(std::vector<std::vector<int>>& board) {
    int row = -1;
    int col = -1;
    bool isEmpty = true;

    // Find an empty cell in the board
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            if (board[i][j] == 0) {
                row = i;
                col = j;
                isEmpty = false;
                break;
            }
        }
        if (!isEmpty) break;
    }

    // If no empty cell is found, the Sudoku is solved
    if (isEmpty) return true;

    // Try placing numbers 1 to 9 in the empty cell
    for (int num = 1; num <= N; ++num) {
        if (isValid(board, row, col, num)) {
            board[row][col] = num;

            // Recursively solve the rest of the board
            if (solveSudoku(board)) return true;

            // If placing num doesn't lead to a solution, reset and try another number
            board[row][col] = 0;
        }
    }

    // Trigger backtracking
    return false;
}

int main() {
    // Example Sudoku puzzle (0 represents empty cells)
    std::vector<std::vector<int>> board = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    if (solveSudoku(board)) {
        std::cout << "Sudoku solved successfully!" << std::endl;
        printBoard(board);
    } else {
        std::cout << "No solution exists." << std::endl;
    }

    return 0;
}
